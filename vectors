#include <iostream>
using namespace std;

template<typename T>
class Vector {
    T* data;
    size_t cap;
    size_t len;

    void resize(size_t new_cap) {
        T* new_data = new T[new_cap];
        for (size_t i = 0; i < len; ++i) new_data[i] = data[i];
        delete[] data;
        data = new_data;
        cap = new_cap;
    }

public:
    Vector() : data(nullptr), cap(0), len(0) {}
    ~Vector() { delete[] data; }

    void push_back(const T& value) {
        if (len == cap) resize(cap == 0 ? 1 : cap * 2);
        data[len++] = value;
    }

    void pop_back() {
        if (len > 0) len--;
    }

    T& operator[](size_t i) { return data[i]; }
    const T& operator[](size_t i) const { return data[i]; }

    size_t size() const { return len; }
    bool empty() const { return len == 0; }

    void clear() { len = 0; }

    void shrink_to_fit() {
        if (len < cap) resize(len);
    }
};

int main() {
    Vector<int> v;
    for (int i = 1; i <= 5; ++i) v.push_back(i * 10);
    cout << "Vector: ";
    for (size_t i = 0; i < v.size(); ++i) cout << v[i] << " ";
    cout << endl;

    v.pop_back();
    cout << "After pop_back: ";
    for (size_t i = 0; i < v.size(); ++i) cout << v[i] << " ";
    cout << endl;

    v.clear();
    cout << "After clear, size = " << v.size() << endl;
    return 0;
}
