#include <iostream>
using namespace std;

template<typename T>
class Stack {
    T* data;
    size_t cap;
    size_t topIndex;

    void resize(size_t new_cap) {
        T* new_data = new T[new_cap];
        for (size_t i = 0; i < topIndex; ++i) new_data[i] = data[i];
        delete[] data;
        data = new_data;
        cap = new_cap;
    }

public:
    Stack() : data(nullptr), cap(0), topIndex(0) {}
    ~Stack() { delete[] data; }

    void push(const T& value) {
        if (topIndex == cap) resize(cap == 0 ? 1 : cap * 2);
        data[topIndex++] = value;
    }

    void pop() {
        if (topIndex > 0) topIndex--;
    }

    T& top() { return data[topIndex - 1]; }
    const T& top() const { return data[topIndex - 1]; }

    bool empty() const { return topIndex == 0; }
    size_t size() const { return topIndex; }

    void clear() { topIndex = 0; }
};

int main() {
    Stack<int> s;
    s.push(10);
    s.push(20);
    s.push(30);

    cout << "Top: " << s.top() << endl;
    s.pop();
    cout << "Top after pop: " << s.top() << endl;

    cout << "Stack elements: ";
    while (!s.empty()) {
        cout << s.top() << " ";
        s.pop();
    }
    cout << endl;
    return 0;
}
